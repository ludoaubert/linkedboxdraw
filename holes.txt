Faut-il utiliser des graphes bi-directionnels ?

1) prendre les données des rectangles de test
 vector<MyRect> rectangles
 le graphe logique est une donnée immuable.
 le graphe topologique egalement. le graphe topologique contient les trous et les rectangles. Il contient donc entre autre l'information
 de a quels rectangles sont connectes topologiquement les trous et les rectangles (info utile pour la rejection
 upfront des matchs).
 De plus les rectangles deviennent eux meme des trous selon les echantillons selectionnés.
 tous les deux sont filtrable.
 le graphe topologique contient une information de distance. On ne garde les liens que si la distance est inférieure
 a un seuil.
2) calculer les trous, ne garder que les trous d'une certaine taille
 vector<MyRect> holes;
3) pour un ensemble {i,j,k} de rectangles selectionés comme déplacables, cet
 ensemble devient un autre ensemble de trous. Un ensemble qui ne change pas,
 et un ensemble qui change. L'ensemble des trous est donc constitué de 2 sous
 ensembles.
4) pour adresser un trou, il faut donc utiliser un doublet (Leg, i) (?)
5) vector<MyRect>* holes2[2] = {&holes, &rectangles}
6) calculer le graphe topologiques pour holes et tout les rectangles (un seul graphe)
 struct Edge{int LEG_i, i, LEG_j, j}
 vector<Edge> edges
 On pourra filtrer le graphe topologique
7) il faut aussi utiliser le graphe logique.
8) pour un ensemble {i,j,k} de rectangles selectionés comme déplacables, il faut selectionner
 le sous graphe logique correspondant.
9) chaque rectangle etant mappé sur une trou, le sous graphe logique doit être mappé depuis l'espace
logique vers l'espace topologique.
10) pour un ensemble {i,j,k} de rectangles selectionnés, pour chaque matching avec un ensemble de trous,
 il va falloir mapper le graphe logique vers le graphe topologique, et il va falloir trier les liens obtenus.
 Cela pour chaque match, ce qui promet d'etre couteux.
 
11) En fait cela va etre couteux pour les liens intra echantillon {i,j,k} cad les liens i=>j, i=>k,...
 mais beaucoup moins couteux pour les liens entre l'echantillon et le reste des rectangles (pas besoin de trier,
 le referentiel est le meme et le tri est déjà fait). Solution: Cf 13 (on ne fait pas de tri, on requete les liens
 un par un, car la probabilite de rejection est très élevée.
 
12) Individual rejection: si on prend un echantillon {i,j,k} matché sur {ti,tj,tk}, et que i est connecté à l tandis que
 ti n'est pas connecté à l, alors le match peut être rejeté directement. Idem pour j et k, ce qui fait que cela peut
 permettre de filtrer de nombreux matchs. Il faut peut-etre distinguer les liens intra echantillon (qui doivent etre mappés)
 et les liens entre l'echantillon et les autres rectangles.
 
13) Lors d'un match, il vaut mieux requeter les liens un par un car dès qu'un lien n'est pas present on passe au suivant.
 C'est la facon la plus rapide de filtrer beaucoup de matchs, en evitant le tri des liens.
 
Apres reflexion: reprendre holes.cpp
La liste des rectangles et des trous devient une liste d'emplacements, et un graphe topologique.
Ces données ne bougent pas.
Les rectangles sont mappés sur ces emplacements, via un simple tableau.
On ne deplace pas tous les rectangles, mais seulement la liste de ceux qui ne sont pas stables
(on coupe les liens du graphe logique qui sont trop long dans le graphe topologique (ou absent du graphe
topologique) et on prend la liste des rectangles qui se sont détachés.
 